using System; using System.Collections.Generic; using System.ComponentModel; using System.Data; using System.Drawing; using System.Linq; using System.Text; using System.Windows.Forms; using System.Threading; using System.Net; using System.Net.Sockets; using WindowsInput; namespace RemoteController {     public partial class RemoteController : Form     {          private static string localIp;         ServerSocket server;         Thread oThread;         public RemoteController()         {             InitializeComponent();         }                  private void btn_startServer_Click(object sender, EventArgs e)         {              server = new ServerSocket(this, localIp);             server.isRunning = true;             oThread = new Thread(new ThreadStart(server.StartListening));              oThread.Start();              //等待主機THREAD啟動             while (!oThread.IsAlive) ;             //Sleep the main thread so the server has a moment to process             Thread.Sleep(1);          }          private void btn_stopServer_Click(object sender, EventArgs e)         {             try             {                 server.isRunning = false;                 oThread.Abort();                 lbl_serverStatus.Text = "伺服器狀態: Off";                 lbl_clientStatus.Text = "客戶端連線: False";                 lbl_pos.Text = "Mouse Pos: ";                 server = null;                            oThread = null;             }             catch (Exception ex)             {                 //Gotta catch em all                 MessageBox.Show("Error stopping server: " + ex.ToString());             }         }          private string getServerIp()         {             //設定預設IP Address給localhost             string ipAddress = "127.0.0.1";              //取得本機IP Address             IPHostEntry host;             host = Dns.GetHostEntry(Dns.GetHostName());             foreach (IPAddress ip in host.AddressList)             {                 if (ip.AddressFamily == AddressFamily.InterNetwork)                 {                     ipAddress = ip.ToString();                  }             }                        return ipAddress;         }          private void WifiMouserServer_Load(object sender, EventArgs e)         {             localIp = getServerIp();             lbl_serverIp.Text = "Server IP: " + localIp;         }          public void setServerStatus(String started)         {             MethodInvoker mi = delegate             {                 if (started == "Started")                 {                     btn_startServer.Enabled = false;                     btn_stopServer.Enabled = true;                 }                 else if (started == "Off")                 {                     btn_startServer.Enabled = true;                     btn_stopServer.Enabled = false;                 }                 lbl_serverStatus.Text = "伺服器狀態: " + started;              };             if (InvokeRequired)                 this.Invoke(mi);          }         public void setPos(String started)         {             MethodInvoker mi = delegate             {                 lbl_pos.Text = "Mouse Pos: " + started;             };             if (InvokeRequired)                 this.Invoke(mi);         }         public void setClientStatus(String started)         {             MethodInvoker mi = delegate             {                 lbl_clientStatus.Text = "Client Connected: " + started;             };             if (InvokeRequired)                 this.Invoke(mi);         }
        private void Form1_FormClosing(object sender, FormClosingEventArgs e)
        {

    }

    private void lbl_serverStatus_Click(object sender, EventArgs e)         {          }          private void lbl_clientStatus_Click(object sender, EventArgs e)         {          }          private void lbl_serverIp_Click(object sender, EventArgs e)         {          }          private void label1_Click_1(object sender, EventArgs e)         {          }          private void grp_status_Enter(object sender, EventArgs e)         {          }          private void WifiMouserServer_Load_1(object sender, EventArgs e)         {          }     }  } 